// –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥—É—ç–ª–µ–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const { getBalance, updateBalance } = require('../currency');

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π
const activeDuels = new Map();

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –¥—É—ç–ª—å –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} challengerId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ—Å–∏–ª –≤—ã–∑–æ–≤
 * @param {number} opponentId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {number} amount - –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏
 */
async function startDuel(bot, challengerId, opponentId, amount) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!challengerId || !opponentId || amount <= 0) {
      return bot.sendMessage(challengerId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥—É—ç–ª–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥—Å—Ç–≤
    const challengerBalance = await getBalance(challengerId);
    if (challengerBalance < amount) {
      return bot.sendMessage(
        challengerId, 
        `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥—É—ç–ª–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: ${challengerBalance}`
      );
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—É—ç–ª—å
    const duelId = `${challengerId}_${opponentId}_${Date.now()}`;
    activeDuels.set(duelId, { 
      challengerId, 
      opponentId, 
      amount, 
      status: 'pending' 
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
    bot.sendMessage(
      opponentId,
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –¥—É—ç–ª—å –Ω–∞ ${amount} –º–æ–Ω–µ—Ç!\n–ü—Ä–∏–Ω—è—Ç—å?`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_duel_${duelId}` },
              { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_duel_${duelId}` }
            ]
          ]
        }
      }
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –¥—É—ç–ª–∏
    bot.sendMessage(
      challengerId,
      `–í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.`
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞
    setTimeout(() => {
      const duel = activeDuels.get(duelId);
      if (duel && duel.status === 'pending') {
        activeDuels.delete(duelId);
        bot.sendMessage(challengerId, '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥—É—ç–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.');
        bot.sendMessage(opponentId, '–í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥—É—ç–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.');
      }
    }, 300000); // 5 minutes
    
  } catch (error) {
    console.error('Duel error:', error);
    bot.sendMessage(challengerId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥—É—ç–ª–∏');
  }
}

/**
 * Handle duel acceptance
 * @param {object} bot - Telegram bot instance
 * @param {string} duelId - ID of the duel
 * @param {boolean} accepted - Whether the duel was accepted
 */
async function handleDuelResponse(bot, duelId, accepted) {
  const duel = activeDuels.get(duelId);
  if (!duel) {
    return bot.sendMessage(
      0, // This will be fixed in the callback handler
      '–≠—Ç–∞ –¥—É—ç–ª—å –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
    );
  }
  
  if (!accepted) {
    activeDuels.delete(duelId);
    bot.sendMessage(duel.challengerId, '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å.');
    bot.sendMessage(duel.opponentId, '–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å.');
    return;
  }
  
  // Check opponent's balance
  const opponentBalance = await getBalance(duel.opponentId);
  if (opponentBalance < duel.amount) {
    activeDuels.delete(duelId);
    bot.sendMessage(
      duel.challengerId, 
      '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥—É—ç–ª–∏.'
    );
    bot.sendMessage(
      duel.opponentId, 
      `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥—É—ç–ª–∏. –ë–∞–ª–∞–Ω—Å: ${opponentBalance}`
    );
    return;
  }
  
  // Process the duel
  duel.status = 'active';
  activeDuels.set(duelId, duel);
  
  // Determine winner (50/50 chance)
  const challengerWins = Math.random() >= 0.5;
  const winnerId = challengerWins ? duel.challengerId : duel.opponentId;
  const loserId = challengerWins ? duel.opponentId : duel.challengerId;
  
  // Update balances
  await updateBalance(winnerId, duel.amount);
  await updateBalance(loserId, -duel.amount);
  
  // Send results to both participants
  bot.sendMessage(
    duel.challengerId,
    challengerWins 
      ? `üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –¥—É—ç–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${duel.amount} –º–æ–Ω–µ—Ç!` 
      : `üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –¥—É—ç–ª—å –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ ${duel.amount} –º–æ–Ω–µ—Ç.`
  );
  
  bot.sendMessage(
    duel.opponentId,
    challengerWins 
      ? `üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –¥—É—ç–ª—å –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ ${duel.amount} –º–æ–Ω–µ—Ç.` 
      : `üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤ –¥—É—ç–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${duel.amount} –º–æ–Ω–µ—Ç!`
  );
  
  // Clean up
  activeDuels.delete(duelId);
}

module.exports = { 
  startDuel,
  handleDuelResponse,
  activeDuels
};
