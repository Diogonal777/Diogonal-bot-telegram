// –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä –∫–∞–∑–∏–Ω–æ
const { getBalance, updateBalance } = require('../currency');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–≥—Ä
const GAMES = {
  random: {
    minBet: 10,
    maxBet: 1000,
    winMultiplier: 1.8
  },
  blackjack: {
    minBet: 20,
    maxBet: 1500,
    winMultiplier: 2.0
  },
  dice: {
    minBet: 5,
    maxBet: 500,
    winMultiplier: 1.5
  },
  slot: {
    minBet: 15,
    maxBet: 1200,
    winMultiplier: 2.5
  }
};

/**
 * Offer to play another round
 */
function offerPlayAgain(bot, chatId, gameType) {
  bot.sendMessage(chatId, '–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–î–∞', callback_data: gameType },
          { text: '–î—Ä—É–≥–∞—è –∏–≥—Ä–∞', callback_data: 'casino' },
          { text: '–ù–µ—Ç', callback_data: 'back_to_main' }
        ]
      ]
    }
  });
}

/**
 * Simple 50/50 game
 */
function playRandomGame() {
  const win = Math.random() >= 0.5;
  return {
    win,
    message: win ? '–í—ã —É–≥–∞–¥–∞–ª–∏!' : '–ù–µ –ø–æ–≤–µ–∑–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'
  };
}

/**
 * Simulated blackjack game
 */
function playBlackjackGame() {
  const playerCard1 = Math.floor(Math.random() * 10) + 1;
  const playerCard2 = Math.floor(Math.random() * 10) + 1;
  const dealerCard1 = Math.floor(Math.random() * 10) + 1;
  const dealerCard2 = Math.floor(Math.random() * 10) + 1;
  
  const playerSum = playerCard1 + playerCard2;
  const dealerSum = dealerCard1 + dealerCard2;
  
  const win = playerSum > dealerSum;
  return {
    win,
    message: `–í–∞—à–∏ –∫–∞—Ä—Ç—ã: ${playerCard1}, ${playerCard2} (${playerSum})\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: ${dealerCard1}, ${dealerCard2} (${dealerSum})`
  };
}

/**
 * Dice rolling game
 */
function playDiceGame() {
  const playerRoll = Math.floor(Math.random() * 6) + 1;
  const botRoll = Math.floor(Math.random() * 6) + 1;
  
  const win = playerRoll > botRoll;
  return {
    win,
    message: `–í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏: ${playerRoll}\n–ë–æ—Ç –≤—ã–±—Ä–æ—Å–∏–ª: ${botRoll}`
  };
}

/**
 * Slot machine game
 */
function playSlotGame() {
  const symbols = ['üçé', 'üçä', 'üçã', 'üçí', 'üíé', '7Ô∏è‚É£'];
  const reel1 = symbols[Math.floor(Math.random() * symbols.length)];
  const reel2 = symbols[Math.floor(Math.random() * symbols.length)];
  const reel3 = symbols[Math.floor(Math.random() * symbols.length)];
  
  const win = reel1 === reel2 || reel2 === reel3 || reel1 === reel3;
  return {
    win,
    message: `[ ${reel1} | ${reel2} | ${reel3} ]`
  };
}

/**
 * Play a round of the selected game
 * @param {string} gameType 
 * @param {number} userId 
 * @param {number} betAmount 
 * @returns {Promise<{win: boolean, message: string}>}
 */
async function playGameRound(gameType, userId, betAmount) {
  switch (gameType) {
    case 'random':
      return playRandomGame();
    case 'blackjack':
      return playBlackjackGame();
    case 'dice':
      return playDiceGame();
    case 'slot':
      return playSlotGame();
    default:
      throw new Error('Unsupported game type');
  }
}

/**
 * Starts a game session
 * @param {object} bot - Telegram bot instance
 * @param {number} chatId - User's chat ID
 * @param {string} gameType - Type of game
 * @param {number} betAmount - Amount being bet
 * @return {Promise<void>}
 */
async function startGame(bot, chatId, gameType, betAmount) {
  try {
    // Validate game type
    if (!GAMES[gameType]) {
      return bot.sendMessage(chatId, '–ò–≥—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
    
    // Get current balance
    const balance = await getBalance(chatId);
    
    // Validate bet amount
    if (betAmount > balance) {
      return bot.sendMessage(chatId, `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance}`);
    }
    
    const game = GAMES[gameType];
    if (betAmount < game.minBet || betAmount > game.maxBet) {
      return bot.sendMessage(chatId, 
        `–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É ${game.minBet} –∏ ${game.maxBet}`);
    }
    
    // Generic game logic
    const result = await playGameRound(gameType, chatId, betAmount);
    
    if (result.win) {
      const winAmount = Math.floor(betAmount * game.winMultiplier);
      await updateBalance(chatId, winAmount);
      bot.sendMessage(chatId, `üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${winAmount} –º–æ–Ω–µ—Ç!\n${result.message}\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${await getBalance(chatId)}`);
    } else {
      await updateBalance(chatId, -betAmount);
      bot.sendMessage(chatId, `üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${betAmount} –º–æ–Ω–µ—Ç.\n${result.message}\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${await getBalance(chatId)}`);
    }
    
    // Offer to play again
    offerPlayAgain(bot, chatId, gameType);
    
  } catch (error) {
    console.error('Game error:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã');
  }
}

module.exports = { startGame, GAMES, playRandomGame, playBlackjackGame, playDiceGame, playSlotGame };
