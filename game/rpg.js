// –û–Ω–ª–∞–π–Ω —Ç–µ–∫—Å—Ç–æ–≤–∞—è RPG –¥–ª—è Telegram-–±–æ—Ç–∞
const { getBalance, updateBalance } = require('../currency');

// –ö–ª–∞—Å—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
// –ó–¥–µ—Å—å –º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
const CHARACTER_CLASSES = {
  warrior: {
    name: '–í–æ–∏–Ω',
    description: '–ú–∞—Å—Ç–µ—Ä –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è —Å –≤—ã—Å–æ–∫–æ–π –∑–∞—â–∏—Ç–æ–π',
    stats: {
      health: 120,
      attack: 8,
      defense: 10,
      magic: 2
    },
    abilities: ['–°–∏–ª—å–Ω—ã–π —É–¥–∞—Ä', '–°—Ç–æ–π–∫–∞ –∑–∞—â–∏—Ç—ã', '–ë–æ–µ–≤–æ–π –∫–ª–∏—á']
  },
  mage: {
    name: '–ú–∞–≥',
    description: '–í–ª–∞–¥–µ–µ—Ç –º–æ—â–Ω—ã–º–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –º–∞–≥–∏–µ–π',
    stats: {
      health: 80,
      attack: 3,
      defense: 4,
      magic: 15
    },
    abilities: ['–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä', '–õ–µ–¥—è–Ω–æ–π —â–∏—Ç', '–¢–µ–ª–µ–ø–æ—Ä—Ç']
  },
  archer: {
    name: '–õ—É—á–Ω–∏–∫',
    description: '–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Ç–∞–∫–∞–º —Å –¥–∞–ª—å–Ω–µ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏',
    stats: {
      health: 90,
      attack: 12,
      defense: 5,
      magic: 5
    },
    abilities: ['–ú–µ—Ç–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª', '–î–æ–∂–¥—å —Å—Ç—Ä–µ–ª', '–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞']
  },
  healer: {
    name: '–¶–µ–ª–∏—Ç–µ–ª—å',
    description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—é–∑–Ω–∏–∫–æ–≤ –∏ –ª–µ—á–∏—Ç —Ä–∞–Ω—ã',
    stats: {
      health: 100,
      attack: 4,
      defense: 6,
      magic: 12
    },
    abilities: ['–ò—Å—Ü–µ–ª–µ–Ω–∏–µ', '–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ', '–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ']
  }
};

// –õ–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
const LOCATIONS = {
  village: {
    name: '–î–µ—Ä–µ–≤–Ω—è',
    description: '–ú–∏—Ä–Ω–∞—è –¥–µ—Ä–µ–≤–Ω—è, –≥–¥–µ –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã',
    actions: ['–ú–∞–≥–∞–∑–∏–Ω', '–¢–∞–≤–µ—Ä–Ω–∞', '–ö—É–∑–Ω–∏—Ü–∞', '–í—ã–π—Ç–∏ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏'],
    enemies: []
  },
  forest: {
    name: '–õ–µ—Å',
    description: '–¢–µ–º–Ω—ã–π –ª–µ—Å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏',
    actions: ['–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å', '–û—Ö–æ—Ç–∏—Ç—å—Å—è', '–°–æ–±–∏—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–µ—Ä–µ–≤–Ω—é'],
    enemies: ['–í–æ–ª–∫', '–ì–æ–±–ª–∏–Ω', '–î–∏–∫–∏–π –∫–∞–±–∞–Ω', '–õ–µ—Å–Ω–æ–π —Ç—Ä–æ–ª–ª—å']
  },
  cave: {
    name: '–ü–µ—â–µ—Ä–∞',
    description: '–ì–ª—É–±–æ–∫–∞—è –ø–µ—â–µ—Ä–∞ —Å —Ü–µ–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –æ–ø–∞—Å–Ω—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏',
    actions: ['–î–æ–±—ã–≤–∞—Ç—å —Ä—É–¥—É', '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≥–ª—É–±–∏–Ω—ã', '–°—Ä–∞–∂–∞—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–µ—Ä–µ–≤–Ω—é'],
    enemies: ['–õ–µ—Ç—É—á–∞—è –º—ã—à—å', '–ü–µ—â–µ—Ä–Ω—ã–π –ø–∞—É–∫', '–°–∫–µ–ª–µ—Ç', '–ì–æ—Ä–Ω—ã–π —Ç—Ä–æ–ª–ª—å']
  },
  mountains: {
    name: '–ì–æ—Ä—ã',
    description: '–í—ã—Å–æ–∫–∏–µ –≥–æ—Ä—ã —Å —Ä–µ–¥–∫–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ —Å–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏',
    actions: ['–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ', '–ü–æ–∏—Å–∫ —Å–æ–∫—Ä–æ–≤–∏—â', '–û—Ö–æ—Ç–∞ –Ω–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–µ—Ä–µ–≤–Ω—é'],
    enemies: ['–ì–æ—Ä–Ω—ã–π –≤–æ–ª–∫', '–ô–µ—Ç–∏', '–ì–∞—Ä–ø–∏—è', '–ì–æ—Ä–Ω—ã–π –≤–µ–ª–∏–∫–∞–Ω']
  },
  dungeon: {
    name: '–ü–æ–¥–∑–µ–º–µ–ª—å–µ',
    description: '–î—Ä–µ–≤–Ω–µ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ —Å –ª–æ–≤—É—à–∫–∞–º–∏ –∏ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤—Ä–∞–≥–∞–º–∏',
    actions: ['–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã', '–ò—Å–∫–∞—Ç—å —Å–æ–∫—Ä–æ–≤–∏—â–∞', '–°—Ä–∞–∂–∞—Ç—å—Å—è —Å –±–æ—Å—Å–æ–º', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–µ—Ä–µ–≤–Ω—é'],
    enemies: ['–°–∫–µ–ª–µ—Ç-–≤–æ–∏–Ω', '–ó–æ–º–±–∏', '–ü—Ä–∏–∑—Ä–∞–∫', '–ù–µ–∫—Ä–æ–º–∞–Ω—Ç', '–î—Ä–µ–≤–Ω–∏–π –¥—Ä–∞–∫–æ–Ω']
  }
};

// –ü—Ä–µ–¥–º–µ—Ç—ã –∏ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
const ITEMS = {
  weapons: {
    '–†–∂–∞–≤—ã–π –º–µ—á': { attack: 5, cost: 50 },
    '–ö–æ—Ä–æ—Ç–∫–∏–π –ª—É–∫': { attack: 7, cost: 75 },
    '–ë–æ–µ–≤–æ–π –ø–æ—Å–æ—Ö': { attack: 3, magic: 8, cost: 100 },
    '–°—Ç–∞–ª—å–Ω–æ–π –∫–ª–∏–Ω–æ–∫': { attack: 12, cost: 200 },
    '–≠–ª—å—Ñ–∏–π—Å–∫–∏–π –ª—É–∫': { attack: 15, cost: 250 },
    '–ü–æ—Å–æ—Ö –∞—Ä—Ö–∏–º–∞–≥–∞': { attack: 6, magic: 18, cost: 300 }
  },
  armor: {
    '–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è': { defense: 5, cost: 60 },
    '–ö–æ–ª—å—á—É–≥–∞': { defense: 10, cost: 150 },
    '–ú–∞–Ω—Ç–∏—è –º–∞–≥–∞': { defense: 3, magic: 5, cost: 120 },
    '–°—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å–ø–µ—Ö–∏': { defense: 15, cost: 280 },
    '–≠–ª—å—Ñ–∏–π—Å–∫–∏–µ –¥–æ—Å–ø–µ—Ö–∏': { defense: 12, speed: 5, cost: 250 },
    '–ú–∞–Ω—Ç–∏—è –∞—Ä—Ö–∏–º–∞–≥–∞': { defense: 8, magic: 12, cost: 320 }
  },
  potions: {
    '–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': { effect: 'health', value: 30, cost: 20 },
    '–ó–µ–ª—å–µ —Å–∏–ª—ã': { effect: 'attack', value: 5, cost: 30 },
    '–ó–µ–ª—å–µ –∑–∞—â–∏—Ç—ã': { effect: 'defense', value: 5, cost: 30 },
    '–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è': { effect: 'health', value: 80, cost: 50 },
    '–≠–ª–∏–∫—Å–∏—Ä –º–∞–≥–∏–∏': { effect: 'magic', value: 10, cost: 60 }
  }
};

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
const players = new Map();

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} className - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @returns {object} - –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
 */
async function createPlayer(userId, className) {
  if (!CHARACTER_CLASSES[className]) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
  }

  const playerClass = CHARACTER_CLASSES[className];
  
  const player = {
    userId,
    className,
    name: playerClass.name,
    level: 1,
    experience: 0,
    stats: { ...playerClass.stats },
    currentHealth: playerClass.stats.health,
    abilities: [...playerClass.abilities],
    inventory: {
      gold: 100,
      items: []
    },
    equipment: {
      weapon: null,
      armor: null
    },
    location: 'village',
    quests: [],
    lastAction: Date.now()
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ "–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
  players.set(userId, player);
  
  return player;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {object|null} - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
function getPlayer(userId) {
  return players.get(userId) || null;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
 * @param {object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
 */
function savePlayer(player) {
  players.set(player.userId, player);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} - true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
function playerExists(userId) {
  return players.has(userId);
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function deletePlayer(userId) {
  players.delete(userId);
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç RPG-–∏–≥—Ä—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function startRPG(bot, chatId) {
  if (playerExists(chatId)) {
    const player = getPlayer(chatId);
    sendLocationMenu(bot, chatId, player);
  } else {
    sendClassSelectionMenu(bot, chatId);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function sendClassSelectionMenu(bot, chatId) {
  const message = 'üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RPG-–º–∏—Ä!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:';
  
  const keyboard = [];
  
  for (const [key, characterClass] of Object.entries(CHARACTER_CLASSES)) {
    keyboard.push([{
      text: `${characterClass.name} - ${characterClass.description}`,
      callback_data: `rpg_class_${key}`
    }]);
  }
  
  keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} className - –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
 */
async function handleClassSelection(bot, chatId, className) {
  try {
    const player = await createPlayer(chatId, className);
    
    let message = `‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: ${player.name}\n\n`;
    message += `üí™ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n`;
    message += `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${player.stats.health}\n`;
    message += `‚öîÔ∏è –ê—Ç–∞–∫–∞: ${player.stats.attack}\n`;
    message += `üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${player.stats.defense}\n`;
    message += `‚ú® –ú–∞–≥–∏—è: ${player.stats.magic}\n\n`;
    message += `üîÆ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n`;
    
    player.abilities.forEach(ability => {
      message += `- ${ability}\n`;
    });
    
    message += `\nüí∞ –ó–æ–ª–æ—Ç–æ: ${player.inventory.gold}\n`;
    message += `\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏: ${LOCATIONS[player.location].name}`;
    
    bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä', callback_data: 'rpg_explore' }],
          [{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ', callback_data: 'rpg_char_info' }],
          [{ text: '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ]
      }
    });
  } catch (error) {
    bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: ${error.message}`);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function sendCharacterInfo(bot, chatId) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data: 'rpg_start' }],
          [{ text: '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ]
      }
    });
  }
  
  let message = `üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ\n\n`;
  message += `üßô‚Äç‚ôÇÔ∏è –ò–º—è: –ì–µ—Ä–æ–π\n`;
  message += `üèÖ –ö–ª–∞—Å—Å: ${player.name}\n`;
  message += `üìä –£—Ä–æ–≤–µ–Ω—å: ${player.level} (–û–ø—ã—Ç: ${player.experience}/${player.level * 100})\n\n`;
  
  message += `üí™ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n`;
  message += `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${player.currentHealth}/${player.stats.health}\n`;
  message += `‚öîÔ∏è –ê—Ç–∞–∫–∞: ${player.stats.attack}\n`;
  message += `üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${player.stats.defense}\n`;
  message += `‚ú® –ú–∞–≥–∏—è: ${player.stats.magic}\n\n`;
  
  message += `üîÆ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:\n`;
  player.abilities.forEach(ability => {
    message += `- ${ability}\n`;
  });
  
  message += `\nüí∞ –ó–æ–ª–æ—Ç–æ: ${player.inventory.gold}\n`;
  
  message += `\nüéí –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n`;
  message += `üó°Ô∏è –û—Ä—É–∂–∏–µ: ${player.equipment.weapon || '–ù–µ—Ç'}\n`;
  message += `üõ°Ô∏è –ë—Ä–æ–Ω—è: ${player.equipment.armor || '–ù–µ—Ç'}\n\n`;
  
  message += `üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å (${player.inventory.items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤):\n`;
  if (player.inventory.items.length === 0) {
    message += `–ü—É—Å—Ç–æ\n`;
  } else {
    player.inventory.items.forEach(item => {
      message += `- ${item.name} (${item.type})\n`;
    });
  }
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –º–∏—Ä', callback_data: 'rpg_explore' }],
        [{ text: '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
      ]
    }
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ª–æ–∫–∞—Ü–∏–∏
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
 */
function sendLocationMenu(bot, chatId, player) {
  const location = LOCATIONS[player.location];
  
  let message = `üìç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–æ–∫–∞—Ü–∏–∏: ${location.name}\n\n`;
  message += `${location.description}\n\n`;
  
  message += `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${player.currentHealth}/${player.stats.health} | üí∞ –ó–æ–ª–æ—Ç–æ: ${player.inventory.gold}\n\n`;
  
  message += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  const keyboard = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
  location.actions.forEach(action => {
    keyboard.push([{ text: action, callback_data: `rpg_action_${player.location}_${action.replace(/ /g, '_')}` }]);
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
  keyboard.push([
    { text: '–ü–µ—Ä—Å–æ–Ω–∞–∂', callback_data: 'rpg_char_info' },
    { text: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data: 'rpg_inventory' }
  ]);
  
  keyboard.push([{ text: '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]);
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∏—Ä–∞
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function exploreWorld(bot, chatId) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data: 'rpg_start' }],
          [{ text: '¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }]
        ]
      }
    });
  }
  
  let message = `üó∫Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:\n\n`;
  
  const keyboard = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
  for (const [key, location] of Object.entries(LOCATIONS)) {
    keyboard.push([{ 
      text: `${location.name} - ${location.description.slice(0, 40)}...`, 
      callback_data: `rpg_location_${key}` 
    }]);
  }
  
  keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'rpg_char_info' }]);
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} locationKey - –ö–ª—é—á –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
 */
function handleLocationSelection(bot, chatId, locationKey) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.');
  }
  
  if (!LOCATIONS[locationKey]) {
    return bot.sendMessage(chatId, '–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è.');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
  player.location = locationKey;
  savePlayer(player);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ª–æ–∫–∞—Ü–∏–∏
  sendLocationMenu(bot, chatId, player);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–∫–∞—Ü–∏–∏
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} locationKey - –ö–ª—é—á –ª–æ–∫–∞—Ü–∏–∏
 * @param {string} actionKey - –ö–ª—é—á –¥–µ–π—Å—Ç–≤–∏—è
 */
function handleLocationAction(bot, chatId, locationKey, actionKey) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.');
  }
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç
  const actionText = actionKey.replace(/_/g, ' ');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ª–æ–∫–∞—Ü–∏–∏ —Ç–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
  const location = LOCATIONS[locationKey];
  if (!location || !location.actions.includes(actionText)) {
    return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏.');
  }
  
  let message = '';
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞—Ü–∏–∏
  switch (locationKey) {
    case 'village':
      switch (actionText) {
        case '–ú–∞–≥–∞–∑–∏–Ω':
          return showShop(bot, chatId, player);
        case '–¢–∞–≤–µ—Ä–Ω–∞':
          message = '–í—ã –∑–∞—à–ª–∏ –≤ —Ç–∞–≤–µ—Ä–Ω—É. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ.';
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
          player.currentHealth = player.stats.health;
          savePlayer(player);
          break;
        case '–ö—É–∑–Ω–∏—Ü–∞':
          message = '–ö—É–∑–Ω–µ—Ü –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–∏—Ç—å –≤–∞—à–µ –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é –∑–∞ –∑–æ–ª–æ—Ç–æ.';
          break;
        case '–í—ã–π—Ç–∏ –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏':
          return exploreWorld(bot, chatId);
      }
      break;
      
    case 'forest':
    case 'cave':
    case 'mountains':
    case 'dungeon':
      if (actionText === '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–µ—Ä–µ–≤–Ω—é') {
        player.location = 'village';
        savePlayer(player);
        return sendLocationMenu(bot, chatId, player);
      } else if (actionText.includes('–°—Ä–∞–∂–∞—Ç—å—Å—è') || actionText === '–û—Ö–æ—Ç–∏—Ç—å—Å—è' || actionText === '–û—Ö–æ—Ç–∞ –Ω–∞ –º–æ–Ω—Å—Ç—Ä–æ–≤') {
        return startBattle(bot, chatId, player, locationKey);
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, —Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Ç.–¥.)
        const reward = Math.floor(Math.random() * 20) + 10;
        player.inventory.gold += reward;
        savePlayer(player);
        message = `–í—ã ${actionText.toLowerCase()} –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ ${reward} –∑–æ–ª–æ—Ç–∞!`;
        
        // –®–∞–Ω—Å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
        if (Math.random() < 0.3) {
          const itemTypes = ['weapons', 'armor', 'potions'];
          const itemType = itemTypes[Math.floor(Math.random() * itemTypes.length)];
          const itemKeys = Object.keys(ITEMS[itemType]);
          const itemKey = itemKeys[Math.floor(Math.random() * Math.min(3, itemKeys.length))]; // –ë–µ—Ä–µ–º –æ–¥–∏–Ω –∏–∑ –ø–µ—Ä–≤—ã—Ö (–±–æ–ª–µ–µ —Å–ª–∞–±—ã—Ö) –ø—Ä–µ–¥–º–µ—Ç–æ–≤
          
          player.inventory.items.push({
            name: itemKey,
            type: itemType,
            ...ITEMS[itemType][itemKey]
          });
          
          savePlayer(player);
          message += `\n\n–í—ã —Ç–∞–∫–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ: ${itemKey}!`;
        }
      }
      break;
  }
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: `rpg_location_${player.location}` }]
      ]
    }
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
 */
function showShop(bot, chatId, player) {
  let message = `üè™ –ú–∞–≥–∞–∑–∏–Ω\n\n`;
  message += `üí∞ –£ –≤–∞—Å ${player.inventory.gold} –∑–æ–ª–æ—Ç–∞\n\n`;
  message += `–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?`;
  
  const keyboard = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
  keyboard.push([
    { text: 'üó°Ô∏è –û—Ä—É–∂–∏–µ', callback_data: 'rpg_shop_weapons' },
    { text: 'üõ°Ô∏è –ë—Ä–æ–Ω—è', callback_data: 'rpg_shop_armor' }
  ]);
  
  keyboard.push([
    { text: 'üß™ –ó–µ–ª—å—è', callback_data: 'rpg_shop_potions' }
  ]);
  
  keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `rpg_location_${player.location}` }]);
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤
 */
function showShopItems(bot, chatId, category) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.');
  }
  
  const categoryItems = ITEMS[category];
  if (!categoryItems) {
    return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤.');
  }
  
  let message = `üè™ –ú–∞–≥–∞–∑–∏–Ω - ${category === 'weapons' ? '–û—Ä—É–∂–∏–µ' : category === 'armor' ? '–ë—Ä–æ–Ω—è' : '–ó–µ–ª—å—è'}\n\n`;
  message += `üí∞ –£ –≤–∞—Å ${player.inventory.gold} –∑–æ–ª–æ—Ç–∞\n\n`;
  
  const keyboard = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –º–µ–Ω—é
  for (const [itemName, itemData] of Object.entries(categoryItems)) {
    const itemDescription = category === 'weapons' ? 
      `–ê—Ç–∞–∫–∞ +${itemData.attack}${itemData.magic ? `, –ú–∞–≥–∏—è +${itemData.magic}` : ''}` :
      category === 'armor' ? 
      `–ó–∞—â–∏—Ç–∞ +${itemData.defense}${itemData.magic ? `, –ú–∞–≥–∏—è +${itemData.magic}` : ''}` :
      `${itemData.effect.charAt(0).toUpperCase() + itemData.effect.slice(1)} +${itemData.value}`;
    
    keyboard.push([{ 
      text: `${itemName} (${itemDescription}) - ${itemData.cost} –∑–æ–ª–æ—Ç–∞`, 
      callback_data: `rpg_buy_${category}_${itemName.replace(/ /g, '_')}` 
    }]);
  }
  
  keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'rpg_shop' }]);
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
 * @param {string} itemKey - –ö–ª—é—á –ø—Ä–µ–¥–º–µ—Ç–∞
 */
function handleItemPurchase(bot, chatId, category, itemKey) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.');
  }
  
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ
  const itemName = itemKey.replace(/_/g, ' ');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
  if (!ITEMS[category] || !ITEMS[category][itemName]) {
    return bot.sendMessage(chatId, '–¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
  }
  
  const item = ITEMS[category][itemName];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∑–æ–ª–æ—Ç–∞
  if (player.inventory.gold < item.cost) {
    return bot.sendMessage(chatId, `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞. –ù—É–∂–Ω–æ: ${item.cost} –∑–æ–ª–æ—Ç–∞.`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'rpg_shop' }]
        ]
      }
    });
  }
  
  // –í—ã—á–∏—Ç–∞–µ–º –∑–æ–ª–æ—Ç–æ
  player.inventory.gold -= item.cost;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
  player.inventory.items.push({
    name: itemName,
    type: category,
    ...item
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  savePlayer(player);
  
  bot.sendMessage(chatId, `–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${itemName} –∑–∞ ${item.cost} –∑–æ–ª–æ—Ç–∞!`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ö—É–ø–∏—Ç—å –µ—â—ë', callback_data: `rpg_shop_${category}` }],
        [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'rpg_shop' }]
      ]
    }
  });
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function showInventory(bot, chatId) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.');
  }
  
  let message = `üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å\n\n`;
  message += `üí∞ –ó–æ–ª–æ—Ç–æ: ${player.inventory.gold}\n\n`;
  
  message += `üéí –ü—Ä–µ–¥–º–µ—Ç—ã:\n`;
  
  if (player.inventory.items.length === 0) {
    message += `–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.`;
  }
  
  const keyboard = [];
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ç–∏–ø—É
  const weapons = player.inventory.items.filter(item => item.type === 'weapons');
  const armor = player.inventory.items.filter(item => item.type === 'armor');
  const potions = player.inventory.items.filter(item => item.type === 'potions');
  
  if (weapons.length > 0) {
    message += `\nüó°Ô∏è –û—Ä—É–∂–∏–µ:\n`;
    weapons.forEach(item => {
      message += `- ${item.name} (–ê—Ç–∞–∫–∞ +${item.attack}${item.magic ? `, –ú–∞–≥–∏—è +${item.magic}` : ''})\n`;
      keyboard.push([{ text: `–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å ${item.name}`, callback_data: `rpg_equip_weapon_${player.inventory.items.indexOf(item)}` }]);
    });
  }
  
  if (armor.length > 0) {
    message += `\nüõ°Ô∏è –ë—Ä–æ–Ω—è:\n`;
    armor.forEach(item => {
      message += `- ${item.name} (–ó–∞—â–∏—Ç–∞ +${item.defense}${item.magic ? `, –ú–∞–≥–∏—è +${item.magic}` : ''})\n`;
      keyboard.push([{ text: `–≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å ${item.name}`, callback_data: `rpg_equip_armor_${player.inventory.items.indexOf(item)}` }]);
    });
  }
  
  if (potions.length > 0) {
    message += `\nüß™ –ó–µ–ª—å—è:\n`;
    potions.forEach(item => {
      const effectName = item.effect === 'health' ? '–ó–¥–æ—Ä–æ–≤—å–µ' : 
                        item.effect === 'attack' ? '–ê—Ç–∞–∫–∞' : 
                        item.effect === 'defense' ? '–ó–∞—â–∏—Ç–∞' : 
                        item.effect === 'magic' ? '–ú–∞–≥–∏—è' : item.effect;
      
      message += `- ${item.name} (${effectName} +${item.value})\n`;
      keyboard.push([{ text: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${item.name}`, callback_data: `rpg_use_potion_${player.inventory.items.indexOf(item)}` }]);
    });
  }
  
  message += `\nüéñÔ∏è –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ:\n`;
  message += `üó°Ô∏è –û—Ä—É–∂–∏–µ: ${player.equipment.weapon || '–ù–µ—Ç'}\n`;
  message += `üõ°Ô∏è –ë—Ä–æ–Ω—è: ${player.equipment.armor || '–ù–µ—Ç'}`;
  
  keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `rpg_location_${player.location}` }]);
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

/**
 * –≠–∫–∏–ø–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–º–µ—Ç
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} itemType - –¢–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ (weapon –∏–ª–∏ armor)
 * @param {number} itemIndex - –ò–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
 */
function equipItem(bot, chatId, itemType, itemIndex) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.');
  }
  
  const itemIdx = parseInt(itemIndex);
  if (isNaN(itemIdx) || itemIdx < 0 || itemIdx >= player.inventory.items.length) {
    return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞.');
  }
  
  const item = player.inventory.items[itemIdx];
  
  if ((itemType === 'weapon' && item.type !== 'weapons') || 
      (itemType === 'armor' && item.type !== 'armor')) {
    return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞.');
  }
  
  // –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
  if (itemType === 'weapon' && player.equipment.weapon) {
    // –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –æ—Ä—É–∂–∏—è
    const oldWeapon = player.inventory.items.find(i => i.name === player.equipment.weapon);
    if (oldWeapon) {
      player.stats.attack -= oldWeapon.attack || 0;
      player.stats.magic -= oldWeapon.magic || 0;
    }
  } else if (itemType === 'armor' && player.equipment.armor) {
    // –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å—ã –æ—Ç —Å—Ç–∞—Ä–æ–π –±—Ä–æ–Ω–∏
    const oldArmor = player.inventory.items.find(i => i.name === player.equipment.armor);
    if (oldArmor) {
      player.stats.defense -= oldArmor.defense || 0;
      player.stats.magic -= oldArmor.magic || 0;
    }
  }
  
  // –≠–∫–∏–ø–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ
  if (itemType === 'weapon') {
    player.equipment.weapon = item.name;
    player.stats.attack += item.attack || 0;
    player.stats.magic += item.magic || 0;
  } else {
    player.equipment.armor = item.name;
    player.stats.defense += item.defense || 0;
    player.stats.magic += item.magic || 0;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  savePlayer(player);
  
  bot.sendMessage(chatId, `–í—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª–∏ ${item.name}!`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data: 'rpg_inventory' }]
      ]
    }
  });
}

/**
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–µ–ª—å–µ
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} itemIndex - –ò–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
 */
function usePotion(bot, chatId, itemIndex) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.');
  }
  
  const itemIdx = parseInt(itemIndex);
  if (isNaN(itemIdx) || itemIdx < 0 || itemIdx >= player.inventory.items.length) {
    return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞.');
  }
  
  const item = player.inventory.items[itemIdx];
  
  if (item.type !== 'potions') {
    return bot.sendMessage(chatId, '–≠—Ç–æ –Ω–µ –∑–µ–ª—å–µ.');
  }
  
  let message = '';
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–µ–ª—å—è
  switch (item.effect) {
    case 'health':
      player.currentHealth = Math.min(player.stats.health, player.currentHealth + item.value);
      message = `–í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ ${item.value} –∑–¥–æ—Ä–æ–≤—å—è. –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${player.currentHealth}/${player.stats.health}`;
      break;
    case 'attack':
      player.stats.attack += item.value;
      message = `–í–∞—à–∞ –∞—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ${item.value}. –¢–µ–∫—É—â–∞—è –∞—Ç–∞–∫–∞: ${player.stats.attack}`;
      break;
    case 'defense':
      player.stats.defense += item.value;
      message = `–í–∞—à–∞ –∑–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ${item.value}. –¢–µ–∫—É—â–∞—è –∑–∞—â–∏—Ç–∞: ${player.stats.defense}`;
      break;
    case 'magic':
      player.stats.magic += item.value;
      message = `–í–∞—à–∞ –º–∞–≥–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ ${item.value}. –¢–µ–∫—É—â–∞—è –º–∞–≥–∏—è: ${player.stats.magic}`;
      break;
    default:
      message = `–ó–µ–ª—å–µ –Ω–µ –∏–º–µ–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞.`;
  }
  
  // –£–¥–∞–ª—è–µ–º –∑–µ–ª—å–µ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  player.inventory.items.splice(itemIdx, 1);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  savePlayer(player);
  
  bot.sendMessage(chatId, `–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ ${item.name}. ${message}`, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data: 'rpg_inventory' }]
      ]
    }
  });
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ä–∞–∂–µ–Ω–∏–µ —Å –º–æ–Ω—Å—Ç—Ä–æ–º
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
 * @param {string} locationKey - –ö–ª—é—á –ª–æ–∫–∞—Ü–∏–∏
 */
function startBattle(bot, chatId, player, locationKey) {
  const location = LOCATIONS[locationKey];
  
  if (location.enemies.length === 0) {
    return bot.sendMessage(chatId, '–í —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ—Ç –≤—Ä–∞–≥–æ–≤.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: `rpg_location_${locationKey}` }]
        ]
      }
    });
  }
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–∞–≥–∞ –∏–∑ –ª–æ–∫–∞—Ü–∏–∏
  const enemyName = location.enemies[Math.floor(Math.random() * location.enemies.length)];
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—Ä–∞–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞ –∏ –ª–æ–∫–∞—Ü–∏–∏
  const locationDifficulty = {
    village: 0.8,
    forest: 1,
    cave: 1.2,
    mountains: 1.5,
    dungeon: 2
  };
  
  const difficulty = locationDifficulty[locationKey] || 1;
  const enemyLevel = Math.max(1, Math.floor(player.level * difficulty));
  
  const enemy = {
    name: enemyName,
    level: enemyLevel,
    health: Math.floor(30 * enemyLevel * difficulty),
    maxHealth: Math.floor(30 * enemyLevel * difficulty),
    attack: Math.floor((5 + enemyLevel * 2) * difficulty),
    defense: Math.floor((3 + enemyLevel) * difficulty)
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–∞–≥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
  player.currentBattle = enemy;
  savePlayer(player);
  
  let message = `‚öîÔ∏è –í—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –≤—Ä–∞–≥–æ–º: ${enemy.name} (–£—Ä–æ–≤–µ–Ω—å ${enemy.level})\n\n`;
  message += `üëæ ${enemy.name}:\n`;
  message += `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${enemy.health}/${enemy.maxHealth}\n`;
  message += `‚öîÔ∏è –ê—Ç–∞–∫–∞: ${enemy.attack}\n`;
  message += `üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${enemy.defense}\n\n`;
  
  message += `üë§ –í—ã:\n`;
  message += `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: ${player.currentHealth}/${player.stats.health}\n`;
  message += `‚öîÔ∏è –ê—Ç–∞–∫–∞: ${player.stats.attack}\n`;
  message += `üõ°Ô∏è –ó–∞—â–∏—Ç–∞: ${player.stats.defense}\n`;
  message += `‚ú® –ú–∞–≥–∏—è: ${player.stats.magic}\n\n`;
  
  message += `–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?`;
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å', callback_data: 'rpg_battle_attack' },
          { text: '‚ú® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–≥–∏—é', callback_data: 'rpg_battle_magic' }
        ],
        [
          { text: 'üß™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ', callback_data: 'rpg_battle_potion' },
          { text: 'üèÉ –°–±–µ–∂–∞—Ç—å', callback_data: 'rpg_battle_flee' }
        ]
      ]
    }
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–æ—é
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞
 */
function handleBattleAction(bot, chatId, action) {
  const player = getPlayer(chatId);
  
  if (!player) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.');
  }
  
  if (!player.currentBattle) {
    return bot.sendMessage(chatId, '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–æ—é.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: `rpg_location_${player.location}` }]
        ]
      }
    });
  }
  
  const enemy = player.currentBattle;
  let message = '';
  
  switch (action) {
    case 'attack':
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω –∏–≥—Ä–æ–∫–∞
      const playerDamage = Math.max(1, player.stats.attack - Math.floor(enemy.defense / 2));
      
      // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Ä–∞–≥—É
      enemy.health = Math.max(0, enemy.health - playerDamage);
      
      message = `‚öîÔ∏è –í—ã –∞—Ç–∞–∫—É–µ—Ç–µ ${enemy.name} –∏ –Ω–∞–Ω–æ—Å–∏—Ç–µ ${playerDamage} —É—Ä–æ–Ω–∞!\n`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–±–µ–¥–∏–ª–∏ –ª–∏ –º—ã
      if (enemy.health <= 0) {
        return handleBattleVictory(bot, chatId, player, enemy);
      }
      
      // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç
      const enemyDamage = Math.max(1, enemy.attack - Math.floor(player.stats.defense / 2));
      player.currentHealth = Math.max(0, player.currentHealth - enemyDamage);
      
      message += `üëæ ${enemy.name} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDamage} —É—Ä–æ–Ω–∞!\n\n`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –ª–∏ –º—ã
      if (player.currentHealth <= 0) {
        return handleBattleDefeat(bot, chatId, player, enemy);
      }
      
      break;
      
    case 'magic':
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –º–∞–≥–∏—è
      if (player.stats.magic <= 0) {
        message = `–£ –≤–∞—Å –Ω–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π!\n\n`;
        
        // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç
        const enemyDmg = Math.max(1, enemy.attack - Math.floor(player.stats.defense / 2));
        player.currentHealth = Math.max(0, player.currentHealth - enemyDmg);
        
        message += `üëæ ${enemy.name} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDmg} —É—Ä–æ–Ω–∞!\n\n`;
        
        if (player.currentHealth <= 0) {
          return handleBattleDefeat(bot, chatId, player, enemy);
        }
      } else {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω
        const magicDamage = Math.max(1, player.stats.magic * 1.5);
        
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Ä–∞–≥—É
        enemy.health = Math.max(0, enemy.health - magicDamage);
        
        message = `‚ú® –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–∞–≥–∏—é –ø—Ä–æ—Ç–∏–≤ ${enemy.name} –∏ –Ω–∞–Ω–æ—Å–∏—Ç–µ ${magicDamage} —É—Ä–æ–Ω–∞!\n`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–±–µ–¥–∏–ª–∏ –ª–∏ –º—ã
        if (enemy.health <= 0) {
          return handleBattleVictory(bot, chatId, player, enemy);
        }
        
        // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç
        const enemyDmg = Math.max(1, enemy.attack - Math.floor(player.stats.defense / 2));
        player.currentHealth = Math.max(0, player.currentHealth - enemyDmg);
        
        message += `üëæ ${enemy.name} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDmg} —É—Ä–æ–Ω–∞!\n\n`;
        
        if (player.currentHealth <= 0) {
          return handleBattleDefeat(bot, chatId, player, enemy);
        }
      }
      break;
      
    case 'potion':
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∑–µ–ª—å—è
      const healthPotions = player.inventory.items.filter(item => 
        item.type === 'potions' && item.effect === 'health'
      );
      
      if (healthPotions.length === 0) {
        message = `–£ –≤–∞—Å –Ω–µ—Ç –∑–µ–ª–∏–π –∑–¥–æ—Ä–æ–≤—å—è!\n\n`;
        
        // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç
        const enemyDmg = Math.max(1, enemy.attack - Math.floor(player.stats.defense / 2));
        player.currentHealth = Math.max(0, player.currentHealth - enemyDmg);
        
        message += `üëæ ${enemy.name} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDmg} —É—Ä–æ–Ω–∞!\n\n`;
        
        if (player.currentHealth <= 0) {
          return handleBattleDefeat(bot, chatId, player, enemy);
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è
        const potion = healthPotions[0];
        const potionIndex = player.inventory.items.indexOf(potion);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        const oldHealth = player.currentHealth;
        player.currentHealth = Math.min(player.stats.health, player.currentHealth + potion.value);
        const healAmount = player.currentHealth - oldHealth;
        
        // –£–¥–∞–ª—è–µ–º –∑–µ–ª—å–µ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        player.inventory.items.splice(potionIndex, 1);
        
        message = `üß™ –í—ã –≤—ã–ø–∏–≤–∞–µ—Ç–µ ${potion.name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ ${healAmount} –∑–¥–æ—Ä–æ–≤—å—è!\n`;
        
        // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç
        const enemyDmg = Math.max(1, enemy.attack - Math.floor(player.stats.defense / 2));
        player.currentHealth = Math.max(0, player.currentHealth - enemyDmg);
        
        message += `üëæ ${enemy.name} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDmg} —É—Ä–æ–Ω–∞!\n\n`;
        
        if (player.currentHealth <= 0) {
          return handleBattleDefeat(bot, chatId, player, enemy);
        }
      }
      break;
      
    case 'flee':
      // –®–∞–Ω—Å —Å–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞ –∏ —É—Ä–æ–≤–Ω—è –≤—Ä–∞–≥–∞
      const fleeChance = 0.4 + (player.level - enemy.level) * 0.1;
      
      if (Math.random() < fleeChance) {
        delete player.currentBattle;
        savePlayer(player);
        
        return bot.sendMessage(chatId, `üèÉ –í–∞–º —É–¥–∞–ª–æ—Å—å —Å–±–µ–∂–∞—Ç—å –æ—Ç ${enemy.name}!`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: `rpg_location_${player.location}` }]
            ]
          }
        });
      } else {
        message = `üèÉ –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–±–µ–∂–∞—Ç—å, –Ω–æ ${enemy.name} –≤–∞—Å –¥–æ–≥–æ–Ω—è–µ—Ç!\n`;
        
        // –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —É—Ä–æ–Ω–æ–º
        const enemyDmg = Math.max(1, Math.floor(enemy.attack * 1.5) - Math.floor(player.stats.defense / 2));
        player.currentHealth = Math.max(0, player.currentHealth - enemyDmg);
        
        message += `üëæ ${enemy.name} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—Å —Å–∑–∞–¥–∏ –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${enemyDmg} —É—Ä–æ–Ω–∞!\n\n`;
        
        if (player.currentHealth <= 0) {
          return handleBattleDefeat(bot, chatId, player, enemy);
        }
      }
      break;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏—Ç–≤—ã
  player.currentBattle = enemy;
  savePlayer(player);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏—Ç–≤—ã
  message += `üëæ ${enemy.name}: ‚ù§Ô∏è ${enemy.health}/${enemy.maxHealth}\n`;
  message += `üë§ –í—ã: ‚ù§Ô∏è ${player.currentHealth}/${player.stats.health}\n\n`;
  
  message += `–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?`;
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞—Ç—å', callback_data: 'rpg_battle_attack' },
          { text: '‚ú® –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–≥–∏—é', callback_data: 'rpg_battle_magic' }
        ],
        [
          { text: 'üß™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ', callback_data: 'rpg_battle_potion' },
          { text: 'üèÉ –°–±–µ–∂–∞—Ç—å', callback_data: 'rpg_battle_flee' }
        ]
      ]
    }
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–±–µ–¥—É –≤ –±–æ—é
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
 * @param {object} enemy - –î–∞–Ω–Ω—ã–µ –≤—Ä–∞–≥–∞
 */
function handleBattleVictory(bot, chatId, player, enemy) {
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
  const expReward = enemy.level * 10;
  const goldReward = Math.floor(enemy.level * 5 + Math.random() * enemy.level * 5);
  
  // –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∏ –∑–æ–ª–æ—Ç–æ
  player.experience += expReward;
  player.inventory.gold += goldReward;
  
  let message = `üéñÔ∏è –í—ã –ø–æ–±–µ–¥–∏–ª–∏ ${enemy.name}!\n\n`;
  message += `–ü–æ–ª—É—á–µ–Ω–æ:\n`;
  message += `‚ú® ${expReward} –æ–ø—ã—Ç–∞\n`;
  message += `üí∞ ${goldReward} –∑–æ–ª–æ—Ç–∞\n\n`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
  if (player.experience >= player.level * 100) {
    player.experience -= player.level * 100;
    player.level += 1;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    player.stats.health += 10;
    player.stats.attack += 2;
    player.stats.defense += 1;
    player.stats.magic += 1;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
    player.currentHealth = player.stats.health;
    
    message += `üåü –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å ${player.level} —É—Ä–æ–≤–µ–Ω—å!\n`;
    message += `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–ª—É—á—à–µ–Ω—ã:\n`;
    message += `‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: +10\n`;
    message += `‚öîÔ∏è –ê—Ç–∞–∫–∞: +2\n`;
    message += `üõ°Ô∏è –ó–∞—â–∏—Ç–∞: +1\n`;
    message += `‚ú® –ú–∞–≥–∏—è: +1\n\n`;
  }
  
  // –®–∞–Ω—Å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç
  if (Math.random() < 0.3) {
    const itemTypes = ['weapons', 'armor', 'potions'];
    const itemType = itemTypes[Math.floor(Math.random() * itemTypes.length)];
    const itemKeys = Object.keys(ITEMS[itemType]);
    const itemKey = itemKeys[Math.floor(Math.random() * Math.min(player.level, itemKeys.length))];
    
    player.inventory.items.push({
      name: itemKey,
      type: itemType,
      ...ITEMS[itemType][itemKey]
    });
    
    message += `üíé –í—ã –Ω–∞—à–ª–∏ –ø—Ä–µ–¥–º–µ—Ç: ${itemKey}!\n\n`;
  }
  
  // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞–≥–∞
  delete player.currentBattle;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  savePlayer(player);
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: `rpg_location_${player.location}` }]
      ]
    }
  });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–æ—é
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {object} player - –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
 * @param {object} enemy - –î–∞–Ω–Ω—ã–µ –≤—Ä–∞–≥–∞
 */
function handleBattleDefeat(bot, chatId, player, enemy) {
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏
  const goldLoss = Math.floor(player.inventory.gold * 0.2); // –¢–µ—Ä—è–µ–º 20% –∑–æ–ª–æ—Ç–∞
  
  player.inventory.gold -= goldLoss;
  if (player.inventory.gold < 0) player.inventory.gold = 0;
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –¥–µ—Ä–µ–≤–Ω—é –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –∑–¥–æ—Ä–æ–≤—å—è
  player.location = 'village';
  player.currentHealth = Math.floor(player.stats.health * 0.5);
  
  // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞–≥–∞
  delete player.currentBattle;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  savePlayer(player);
  
  let message = `‚ò†Ô∏è –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –±–æ—é —Å ${enemy.name}!\n\n`;
  message += `–í—ã —Ç–µ—Ä—è–µ—Ç–µ —Å–æ–∑–Ω–∞–Ω–∏–µ –∏ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –≤ –¥–µ—Ä–µ–≤–Ω–µ.\n`;
  message += `–ü–æ—Ç–µ—Ä—è–Ω–æ ${goldLoss} –∑–æ–ª–æ—Ç–∞.\n\n`;
  message += `–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: ${player.currentHealth}/${player.stats.health}`;
  
  bot.sendMessage(chatId, message, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: `rpg_location_${player.location}` }]
      ]
    }
  });
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è RPG
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞
 * @param {object} query - –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
 */
function handleRPGCallback(bot, query) {
  const chatId = query.message.chat.id;
  const data = query.data;
  
  if (data === 'rpg_start') {
    startRPG(bot, chatId);
    return true;
  }
  
  // –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
  if (data.startsWith('rpg_class_')) {
    const className = data.substring('rpg_class_'.length);
    handleClassSelection(bot, chatId, className);
    return true;
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
  if (data === 'rpg_char_info') {
    sendCharacterInfo(bot, chatId);
    return true;
  }
  
  // –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–∏—Ä–∞
  if (data === 'rpg_explore') {
    exploreWorld(bot, chatId);
    return true;
  }
  
  // –í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
  if (data.startsWith('rpg_location_')) {
    const locationKey = data.substring('rpg_location_'.length);
    handleLocationSelection(bot, chatId, locationKey);
    return true;
  }
  
  // –î–µ–π—Å—Ç–≤–∏–µ –≤ –ª–æ–∫–∞—Ü–∏–∏
  if (data.startsWith('rpg_action_')) {
    const [, locationKey, actionKey] = data.split('_action_')[1].split('_', 2);
    const remainingAction = data.split(`_action_${locationKey}_${actionKey}`)[1];
    const fullActionKey = actionKey + (remainingAction || '');
    handleLocationAction(bot, chatId, locationKey, fullActionKey);
    return true;
  }
  
  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
  if (data === 'rpg_inventory') {
    showInventory(bot, chatId);
    return true;
  }
  
  // –ú–∞–≥–∞–∑–∏–Ω
  if (data === 'rpg_shop') {
    showShop(bot, chatId, getPlayer(chatId));
    return true;
  }
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤
  if (data.startsWith('rpg_shop_')) {
    const category = data.substring('rpg_shop_'.length);
    showShopItems(bot, chatId, category);
    return true;
  }
  
  // –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  if (data.startsWith('rpg_buy_')) {
    const [, category, itemKey] = data.split('_buy_')[1].split('_', 2);
    const remainingItemKey = data.split(`_buy_${category}_${itemKey}`)[1];
    const fullItemKey = itemKey + (remainingItemKey || '');
    handleItemPurchase(bot, chatId, category, fullItemKey);
    return true;
  }
  
  // –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  if (data.startsWith('rpg_equip_')) {
    const [, itemType, itemIndex] = data.split('_equip_')[1].split('_', 2);
    equipItem(bot, chatId, itemType, itemIndex);
    return true;
  }
  
  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–µ–ª—å—è
  if (data.startsWith('rpg_use_potion_')) {
    const itemIndex = data.substring('rpg_use_potion_'.length);
    usePotion(bot, chatId, itemIndex);
    return true;
  }
  
  // –î–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—é
  if (data.startsWith('rpg_battle_')) {
    const action = data.substring('rpg_battle_'.length);
    handleBattleAction(bot, chatId, action);
    return true;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ RPG, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
  return false;
}

module.exports = {
  startRPG,
  handleRPGCallback,
  playerExists
};