// –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ Telegram
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const fs = require('fs');
const path = require('path');
const { google } = require('googleapis');
const { casinoMenu, setBet, playGame } = require('./game/casino');
const { startDuel, handleDuelResponse, activeDuels } = require('./game/duel');
const { startRPG, handleRPGCallback, playerExists } = require('./game/rpg');
const { getBalance, updateBalance } = require('./currency');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const ADMIN_ID = 6091948159;
const token = process.env.TELEGRAM_TOKEN || 'YOUR_TELEGRAM_TOKEN'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const bot = new TelegramBot(token, {
  polling: true // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ webhook –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
});
const app = express();

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};
const userQuestions = {};
const pendingQuestions = [];

// –¢–æ–ø–∏–∫–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
const topicTitles = {
  topic1: '–°–µ–º—å—è L.E.G.E.N.D.A',
  topic2: '–ö–∞–Ω–∞–ª',
  topic3: '–õ–∏—á–Ω–æ–µ'
};

// Google Sheets credentials from environment variables
const GOOGLE_CREDENTIALS = {
  type: "service_account",
  project_id: process.env.GOOGLE_PROJECT_ID || "diogonal777-telegram-bot",
  private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID,
  private_key: process.env.GOOGLE_PRIVATE_KEY ? 
    process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n') : 
    '',
  client_email: process.env.GOOGLE_CLIENT_EMAIL || "bot-sheets@diogonal777-telegram-bot.iam.gserviceaccount.com",
  client_id: process.env.GOOGLE_CLIENT_ID,
  auth_uri: "https://accounts.google.com/o/oauth2/auth",
  token_uri: "https://oauth2.googleapis.com/token",
  auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
  client_x509_cert_url: process.env.GOOGLE_CERT_URL,
  universe_domain: "googleapis.com"
};

// Create auth client
let authClient = null;

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
const dataDir = path.join(__dirname, 'data');
const historyFile = path.join(dataDir, 'history.json');
const statsFile = path.join(dataDir, 'stats.json');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (!fs.existsSync(historyFile)) {
  fs.writeFileSync(historyFile, JSON.stringify([]), 'utf8');
}

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (!fs.existsSync(statsFile)) {
  fs.writeFileSync(
    statsFile, 
    JSON.stringify({ 
      total: 0, 
      answered: 0, 
      ignored: 0, 
      users: [], 
      week: getCurrentWeek() 
    }), 
    'utf8'
  );
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
 * @returns {number} - –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
 */
function getCurrentWeek() {
  const now = new Date();
  const onejan = new Date(now.getFullYear(), 0, 1);
  return Math.ceil((((now - onejan) / 86400000) + onejan.getDay() + 1) / 7);
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
 * @param {object} entry - –ó–∞–ø–∏—Å—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * @param {boolean} update - –ù—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
 */
function saveToHistory(entry, update = false) {
  try {
    const data = JSON.parse(fs.readFileSync(historyFile, 'utf8'));

    if (update) {
      const index = data.findIndex(e =>
        e.userId === entry.userId &&
        e.question === entry.question
      );

      if (index !== -1) {
        if (!data[index].answer) {
          data[index].answer = entry.answer;
          data[index].timestamp = new Date().toISOString();
        }
      } else {
        // fallback - if not found, add it
        data.push(entry);
      }
    } else {
      const duplicate = data.find(e =>
        e.userId === entry.userId &&
        e.question === entry.question
      );

      if (!duplicate) {
        data.push(entry);
      }
    }

    fs.writeFileSync(historyFile, JSON.stringify(data, null, 2), 'utf8');
  } catch (err) {
    console.error('Error saving to history:', err);
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * @returns {object} - –û–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function loadStats() {
  try {
    if (!fs.existsSync(statsFile)) {
      return { total: 0, answered: 0, ignored: 0, users: [], week: getCurrentWeek() };
    }
    return JSON.parse(fs.readFileSync(statsFile, 'utf8'));
  } catch (err) {
    console.error('Error loading stats:', err);
    return { total: 0, answered: 0, ignored: 0, users: [], week: getCurrentWeek() };
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 * @param {object} stats - –û–±—ä–µ–∫—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function saveStats(stats) {
  try {
    fs.writeFileSync(statsFile, JSON.stringify(stats, null, 2), 'utf8');
  } catch (err) {
    console.error('Error saving stats:', err);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google
 * @returns {Promise<object>} - –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
 */
async function getAuthClient() {
  if (authClient) return authClient;
  
  try {
    const auth = new google.auth.GoogleAuth({
      credentials: GOOGLE_CREDENTIALS,
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    });
    
    authClient = await auth.getClient();
    return authClient;
  } catch (error) {
    console.error('Google Sheets auth error:', error);
    throw error;
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É
 * @param {string} spreadsheetId - ID Google —Ç–∞–±–ª–∏—Ü—ã
 * @param {string} range - –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Sheet1!A:C')
 * @param {Array} values - –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
 * @returns {Promise<object>} - –û—Ç–≤–µ—Ç API Sheets
 */
async function appendToSheet(spreadsheetId, range, values) {
  try {
    if (!spreadsheetId) {
      console.warn('No spreadsheet ID provided, skipping sheet update');
      return null;
    }
    
    const sheets = google.sheets({ version: 'v4', auth: await getAuthClient() });
    
    const response = await sheets.spreadsheets.values.append({
      spreadsheetId,
      range,
      valueInputOption: 'RAW',
      insertDataOption: 'INSERT_ROWS',
      requestBody: { values: [values] }
    });
    
    return response.data;
  } catch (error) {
    console.error('Error appending to sheet:', error);
    throw error;
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
 * @param {object} query - –û–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
async function handleCallbackQuery(query) {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ callback –∫ RPG-–∏–≥—Ä–µ
  if (data.startsWith('rpg_') || data === 'rpg_start') {
    // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥—É–ª—é RPG
    if (handleRPGCallback(bot, query)) {
      return;
    }
  }

  // –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é –∫–∞–∑–∏–Ω–æ
  if (data === 'casino') {
    casinoMenu(bot, chatId);
    return;
  }

  if (['random', 'blackjack', 'dice', 'slot'].includes(data)) {
    userStates[chatId] = { step: 'casino_bet', gameType: data };
    return setBet(bot, chatId, data);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É—ç–ª–µ–π
  if (data.startsWith('accept_duel_') || data.startsWith('reject_duel_')) {
    const duelId = data.substring(data.indexOf('_duel_') + 6);
    const accepted = data.startsWith('accept');
    await handleDuelResponse(bot, duelId, accepted);
    return;
  }

  // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
  const stats = loadStats();
  if (getCurrentWeek() !== stats.week) {
    stats.total = 0;
    stats.answered = 0;
    stats.ignored = 0;
    stats.users = [];
    stats.week = getCurrentWeek();
    saveStats(stats);
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (chatId === ADMIN_ID && data === 'admin_stats') {
    const userList = stats.users.join('\n') || '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)';
    bot.sendMessage(chatId,
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
      `–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${stats.total}\n` +
      `–û—Ç–≤–µ—á–µ–Ω–æ: ${stats.answered}\n` +
      `–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${stats.ignored}\n\n` +
      `–ü–∏—Å–∞–ª–∏:\n${userList}`
    );
    return;
  }

  // –û—á–µ—Ä–µ–¥—å –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (chatId === ADMIN_ID && data === 'admin_queue') {
    if (pendingQuestions.length === 0) {
      return bot.sendMessage(chatId, '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
    }

    pendingQuestions.forEach((q, i) => {
      const text = `#${i + 1}\n–û—Ç: ${q.userName}\nID: ${q.userId}\n–¢–µ–º–∞: ${q.topic}\n–í–æ–ø—Ä–æ—Å: ${q.question}`;

      bot.sendMessage(ADMIN_ID, text, {
        reply_markup: {
          inline_keyboard: [[
            { text: '‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_${q.userId}_${encodeURIComponent(q.question)}` },
            { text: '‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data: `ignore_${q.userId}_${encodeURIComponent(q.question)}` }
          ]]
        }
      });
    });
    return;
  }

  // –í—ã–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (chatId === ADMIN_ID && data === 'admin_history_file') {
    try {
      const data = JSON.parse(fs.readFileSync(historyFile, 'utf8'));
      if (!data.length) return bot.sendMessage(chatId, '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.');

      const lines = data.map((entry, i) => {
        return [
          `#${i + 1}`,
          `–î–∞—Ç–∞: ${entry.timestamp}`,
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${entry.userName} (ID: ${entry.userId})`,
          `–¢–µ–º–∞: ${entry.topic}`,
          `–í–æ–ø—Ä–æ—Å: ${entry.question}`,
          `–û—Ç–≤–µ—Ç: ${entry.answer || '(–µ—â—ë –Ω–µ—Ç)'}`,
          `---`
        ].join('\n');
      });

      const text = lines.join('\n\n');
      const filePath = path.join(dataDir, 'history.txt');
      fs.writeFileSync(filePath, text);
      bot.sendDocument(chatId, filePath);
    } catch (err) {
      console.error('Error reading history:', err);
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.');
    }
    return;
  }

  // –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
  if (data.startsWith('reply_')) {
    const parts = data.split('_');
    const targetId = parseInt(parts[1]);
    const question = decodeURIComponent(parts.slice(2).join('_'));
    const stats = loadStats();
    stats.answered++;
    saveStats(stats);
    userStates[ADMIN_ID] = { step: 'awaiting_reply', targetId };

    bot.sendMessage(ADMIN_ID, `–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è ${userQuestions[targetId]?.username || '(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)'} (${targetId}):\n\n–í–æ–ø—Ä–æ—Å: ${question}`);

    const index = pendingQuestions.findIndex(q => q.userId == targetId && q.question === question);
    if (index !== -1) pendingQuestions.splice(index, 1);

    bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–æ–º
  if (data.startsWith('ignore_')) {
    const parts = data.split('_');
    const targetId = parseInt(parts[1]);
    const question = decodeURIComponent(parts.slice(2).join('_'));
    const stats = loadStats();
    stats.ignored++;
    saveStats(stats);
    bot.sendMessage(targetId, '–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
    bot.sendMessage(ADMIN_ID, `–í—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç ${targetId}.`);

    const index = pendingQuestions.findIndex(q => q.userId == targetId && q.question === question);
    if (index !== -1) pendingQuestions.splice(index, 1);

    bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
      chat_id: chatId,
      message_id: messageId
    });
    return;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
  if (data === 'ask') {
    bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [
          [{ text: '–°–µ–º—å—è L.E.G.E.N.D.A', callback_data: 'topic1' }],
          [{ text: '–ö–∞–Ω–∞–ª', callback_data: 'topic2' }],
          [{ text: '–õ–∏—á–Ω–æ–µ', callback_data: 'topic3' }],
          [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    });
  } else if (data === 'projects') {
    bot.editMessageText('–ü—Ä–æ–µ–∫—Ç—ã Diogonal777:\n\n–°–∞–π—Ç: https://diogonal777.github.io/Diogonal-game\n–ú–æ–±–∏–ª—å–Ω–∞—è –∏–≥—Ä–∞: (–ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—é)\n–°–∞–π—Ç: https://taplink.cc/diogonal\n–°–µ–º—å—è –≤ Grand mobile: https://taplink.cc/l.e.g.e.n.d.a', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]]
      }
    });
  } else if (data === 'about me') {
    bot.editMessageText('–Ø Diogonal777 (–í–∞–¥–∏–º).\n–ö–æ–≥–¥–∞ —Å–∫—É—á–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É—é.', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]]
      }
    });
  } else if (data === 'about bot') {
    bot.editMessageText('–°–æ–∑–¥–∞—é —è –±–æ—Ç–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–º–æ—â—å—é chat GPT. –í –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥ –ø–∏—à—É —Å–∞–º.\n\n–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã. –Ø –±—É–¥—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å –µ–≥–æ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @Diogonal777', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]]
      }
    });
  }

  // –í—ã–±–æ—Ä —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–∞
  if (['topic1', 'topic2', 'topic3'].includes(data)) {
    const topicTitle = topicTitles[data];
    userStates[chatId] = { step: 'waiting_question', topic: topicTitle };
    bot.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: ${topicTitle}. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:`, {
      chat_id: chatId,
      message_id: messageId
    });
  }

  // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  if (data === 'back_to_main') {
    userStates[chatId] = null;
    bot.editMessageText('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Diogonal777. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask' }],
          [{ text: '–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã', callback_data: 'projects' }],
          [{ text: '–û–±–æ –º–Ω–µ', callback_data: 'about me' }],
          [{ text: '–û –±–æ—Ç–µ', callback_data: 'about bot' }]
        ]
      }
    });
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {object} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function handleMessage(msg) {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (!text) return;
  
  const state = userStates[chatId];

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –≤ –∫–∞–∑–∏–Ω–æ
  if (state && state.step === 'casino_bet') {
    const betAmount = parseInt(text);
    if (isNaN(betAmount)) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏.');
      return;
    }
    
    playGame(bot, chatId, state.gameType, betAmount);
    userStates[chatId] = null;
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
  if (chatId === ADMIN_ID && state && state.step === 'awaiting_reply') {
    const targetId = state.targetId;
    const answer = text;

    try {
      bot.sendMessage(targetId, `–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n${answer}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ—Ç–≤–µ—Ç–æ–º
      const entry = {
        userId: targetId,
        question: userQuestions[targetId]?.question || 'Unknown question',
        answer: answer,
        timestamp: new Date().toISOString()
      };
      
      saveToHistory(entry, true);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
      try {
        const spreadsheetId = process.env.GOOGLE_SHEET_ID;
        if (spreadsheetId) {
          const values = [
            new Date().toISOString(),
            targetId,
            userQuestions[targetId]?.username || 'Unknown',
            userQuestions[targetId]?.question || 'Unknown question',
            answer
          ];
          appendToSheet(spreadsheetId, 'Answers!A:E', values);
        }
      } catch (err) {
        console.error('Google Sheets error:', err);
      }
      
      bot.sendMessage(ADMIN_ID, `–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetId}.`);
    } catch (err) {
      console.error('Error sending answer:', err);
      bot.sendMessage(ADMIN_ID, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: ${err}`);
    }
    
    userStates[ADMIN_ID] = null;
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  if (state && state.step === 'waiting_question') {
    const question = text;
    const userName = msg.from?.first_name + (msg.from?.last_name ? ' ' + msg.from.last_name : '');
    const userInfo = `${userName} (@${msg.from?.username || 'no_username'})`;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = loadStats();
    stats.total++;
    if (!stats.users.includes(userInfo)) {
      stats.users.push(userInfo);
    }
    saveStats(stats);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
    const entry = {
      userId: chatId,
      userName: userInfo,
      topic: state.topic,
      question: question,
      timestamp: new Date().toISOString()
    };
    
    userQuestions[chatId] = {
      topic: state.topic,
      question: question,
      username: userInfo
    };
    
    saveToHistory(entry);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    pendingQuestions.push({
      userId: chatId,
      userName: userInfo,
      topic: state.topic,
      question: question
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.sendMessage(ADMIN_ID, `–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n–û—Ç: ${userInfo}\nID: ${chatId}\n–¢–µ–º–∞: ${state.topic}\n–í–æ–ø—Ä–æ—Å: ${question}`);
    bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –æ—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    
    userStates[chatId] = null;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
 * @param {object} msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function handleAdminCommand(msg) {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
          { text: 'üìã –û—á–µ—Ä–µ–¥—å', callback_data: 'admin_queue' }
        ],
        [
          { text: 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data: 'admin_history_file' }
        ]
      ]
    }
  });
}

// ==================== –ù–ê–°–¢–†–û–ô–ö–ê –ë–û–¢–ê ====================

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = null;

  bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Diogonal777. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask' }],
        [{ text: '–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã', callback_data: 'projects' }],
        [{ text: '–û–±–æ –º–Ω–µ', callback_data: 'about me' }],
        [{ text: '–û –±–æ—Ç–µ', callback_data: 'about bot' }]
      ]
    }
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.onText(/\/admin/, (msg) => {
  if (msg.chat.id === ADMIN_ID) {
    handleAdminCommand(msg);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  if (msg.text && !msg.text.startsWith('/')) {
    handleMessage(msg);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', (query) => {
  handleCallbackQuery(query);
});

// –ó–∞–ø—É—Å–∫ Express-—Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  res.send('Telegram bot server is running!');
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
