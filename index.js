const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const bodyParser = require('body-parser');

const token = process.env.TELEGRAM_TOKEN;
const ADMIN_ID = 6091948159;

const bot = new TelegramBot(token);
const userStates = {};
const userQuestions = {};
const pendingQuestions = [];
const { Readable } = require('stream');
const fs = require('fs');
const path = require('path');
const historyFile = path.join(__dirname, 'history.json');
if (!fs.existsSync(historyFile)) {
  fs.writeFileSync(historyFile, JSON.stringify([]));
}

const { google } = require('googleapis');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á
const GOOGLE_CREDENTIALS = {
  type: "service_account",
  project_id: "diogonal777-telegram-bot",
  private_key_id: "376dbb2cdcaf3e68575cb8c8a7d760d217dbd397",
  private_key: `-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDNY+zYjFCmVAIh\nT9q9yPbkstnd7vhDx4jdvCLa8jl
  Jb4QXzp55g0ajVP8OxUJG4qk+BkEDdgkNV8Jy\nhl8/5e04HkS0nVIgfrY5+xdGch1c3G1E9SB/3of0C8km7sldlzAaFpSkZjZuOSCA\n+cvGT5SU2YoNMebOQHpj4Kqx2wHjAg8
  x1gThrqXVRpfPZAo2Sc3sEoLnVTwoCoyE\ns4JNZq2aRpyJfAFPSl4aTPi9g+g2KiUgvbzzRx5bxM6o35uaR9jWyR3PRIpkuoqV\nQjXKG1DCRxlLzmN1UOHJUiBCZbo9iH4aCga
  /RMMSDUFA3Bs5npW4W9uKSw5ZdPFr\n8fYl9MiNAgMBAAECggEAHEB6QAg/AL4OA/SGx3PJCEjUwJsiMbqU6EE8fybx+9i3\n0AmHEXpeAVIL+oVmOjdr5cD4+Oen05rGf7fdir3
  PHVjGhRydwyQC32NbPoCsas1U\nR3e7ZnNe+pITc4RFlRbakkAYZqu7oXpArxUNM2RXcQkiXPHICIdkfnAVMr1IG2g6\nRNcWGeIeC+gg+3ohA1kD+KJ2tZOR8LKMbFsjI0eXJmU
  Tvptwfm3zwPBJ/kvCA8yK\nAAD/sokoZ22rUITTEeT/2srZJo5UgtlJA3tpzG+ZMduQcMuTnYvlPFEJP1aee6sY\njNLYjhkPB/+g7Ay62pi+xbEXDENOIIrarixkVsSryQKBgQD
  pHZACXLeW7ykDUgNt\nWlsRuIn0fR3ZKDW5pV2WxjV0AWz+zscaekejm+GOqX/NFa4H4jtHSHrdk94yTLy3\nJkmN420RMx2/Mvj4MJL2+RRV8DTjrqd6ATRqj2s5IjrEn9k+xwx
  qrU88P4SWCck4\n8Im48EiHhZipSQ3zRmI5xK57uQKBgQDhjZm8UhWChTBDDHUCgpPnCtkh+CJQo7y9\nJpWRJ3TbSb3CzCxY9boA3B4Ej3RgFu87GKQa/d95GTr3ikzcqnVi8hc
  QtYaOgMH+\nn9NEaklc/k7GEFVaJas09fPHiyzGXi1xAjOax5a+twak594hZcvKjxlZTfXkgtbc\nJ1WTnDildQKBgGUQsQelJN8mDtTmsJ+vRb5YEE9UEyW7vhcfb4TXqAMEPzn
  1cfKz\nwu1WvqJ4L/U9CfdXCLYt4T7BRdru0/5fdhIy4G1NiP8E3VXU0VKLyFo9yuBPL0LA\n1PXB+g2KHopyduA1sddqDekj7JqT4Y5zEnKAkiFXNUlnZ8np4NoEwFTZAoGBALq
  a\nt/IBxyHwpvkRuUyWU172rqVX8KveiyvCXEN27UrvOzuKR7Zhtb04Xu1O8ez9jHbL\n8BkUqGo74XkixmxZ6jwuJb8BL41+IQFToSoc9Q0mqG1c3gBy4a4zPbh9AFItYFL6\ni
  08miSTHr4uG+VOQMIYo1cP4p9KiHLiPIlG5EXRxAoGBAIjC651NxVBSyeir8emv\nzLOfNSVIZjc35b4q/2hWAfOZrnT+HITRS0uoNhQhaMrTXBN7HJ4pB455qNXqPIEg\nsVNAr
  isdu4xiKwtD8SVwcZSS8Tp5fCJmAiYaA9kdKwq92NIaDYwI8rsphFoiPsoZ\nwh4DyrJK+AuHAvsKr6DXaflq\n-----END PRIVATE KEY-----\n`,
  client_email: "bot-sheets@diogonal777-telegram-bot.iam.gserviceaccount.com",
  client_id: "102693091709790752792",
  auth_uri: "https://accounts.google.com/o/oauth2/auth",
  token_uri: "https://oauth2.googleapis.com/token",
  auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
  client_x509_cert_url: "https://www.googleapis.com/robot/v1/metadata/x509/bot-sheets%40diogonal777-telegram-bot.iam.gserviceaccount.com",
  universe_domain: "googleapis.com"
};

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
const auth = new google.auth.GoogleAuth({
  credentials: GOOGLE_CREDENTIALS,
  scopes: ['https://www.googleapis.com/auth/spreadsheets']
});

let stats = loadStats();
const statsFile = path.join(__dirname, 'stats.json');

function loadStats() {
  try {
    if (!fs.existsSync(statsFile)) {
      return { total: 0, answered: 0, ignored: 0, users: [], week: getCurrentWeek() };
    }
    return JSON.parse(fs.readFileSync(statsFile, 'utf8'));
  } catch {
    return { total: 0, answered: 0, ignored: 0, users: [], week: getCurrentWeek() };
  }
}

function saveStats(stats) {
  fs.writeFileSync(statsFile, JSON.stringify(stats, null, 2));
}

function getCurrentWeek() {
  const now = new Date();
  const onejan = new Date(now.getFullYear(), 0, 1);
  return Math.ceil((((now - onejan) / 86400000) + onejan.getDay() + 1) / 7);
}

function saveToHistory(entry, update = false) {
  try {
    const data = JSON.parse(fs.readFileSync(historyFile, 'utf8'));

    if (update) {
      const index = data.findIndex(e =>
        e.userId === entry.userId &&
        e.question === entry.question
      );

      if (index !== -1) {
        if (!data[index].answer) {
          data[index].answer = entry.answer;
          data[index].timestamp = new Date().toISOString();
        }
      } else {
        // fallback ‚Äî –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–∏–º
        data.push(entry);
      }

    } else {
      const duplicate = data.find(e =>
        e.userId === entry.userId &&
        e.question === entry.question
      );

      if (!duplicate) {
        data.push(entry);
      }
    }

    fs.writeFileSync(historyFile, JSON.stringify(data, null, 2));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é:', err);
  }
}

async function appendToSheet(spreadsheetId, range, values) {
  const sheets = google.sheets({ version: 'v4', auth: await auth.getClient() });
  await sheets.spreadsheets.values.append({
    spreadsheetId,
    range,
    valueInputOption: 'RAW',
    insertDataOption: 'INSERT_ROWS',
    requestBody: { values: [values] }
  });
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = null;

  bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Diogonal777. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask' }],
        [{ text: '–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã', callback_data: 'projects' }],
        [{ text: '–û–±–æ –º–Ω–µ', callback_data: 'about me' }],
        [{ text: '–û –±–æ—Ç–µ', callback_data: 'about bot' }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const messageId = query.message.message_id;
  const data = query.data;
  if (getCurrentWeek() !== stats.week) {
  stats = { total: 0, answered: 0, ignored: 0, users: [], week: getCurrentWeek() };
  saveStats(stats);
}
  if (chatId === ADMIN_ID && data === 'admin_stats') {
  const userList = stats.users.join('\n') || '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)';
  bot.sendMessage(chatId,
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
    `–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${stats.total}\n` +
    `–û—Ç–≤–µ—á–µ–Ω–æ: ${stats.answered}\n` +
    `–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${stats.ignored}\n\n` +
    `–ü–∏—Å–∞–ª–∏:\n${userList}`
  );
  return;
}
if (chatId === ADMIN_ID && data === 'admin_queue') {
  if (pendingQuestions.length === 0) {
    return bot.sendMessage(ADMIN_ID, '–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
  }

  pendingQuestions.forEach((q, i) => {
    const text = `#${i + 1}\n–û—Ç: ${q.userName}\nID: ${q.userId}\n–¢–µ–º–∞: ${q.topic}\n–í–æ–ø—Ä–æ—Å: ${q.question}`;

    bot.sendMessage(ADMIN_ID, text, {
      reply_markup: {
        inline_keyboard: [[
          { text: '‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_${q.userId}_${encodeURIComponent(q.question)}` },
          { text: '‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data: `ignore_${q.userId}_${encodeURIComponent(q.question)}` }
        ]]
      }
    });
  });
}

if (chatId === ADMIN_ID && data === 'admin_history_file') {
  try {
    const data = JSON.parse(fs.readFileSync(historyFile, 'utf8'));
    if (!data.length) return bot.sendMessage(chatId, '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.');

    const lines = data.map((entry, i) => {
      return [
        `#${i + 1}`,
        `–î–∞—Ç–∞: ${entry.timestamp}`,
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${entry.userName} (ID: ${entry.userId})`,
        `–¢–µ–º–∞: ${entry.topic}`,
        `–í–æ–ø—Ä–æ—Å: ${entry.question}`,
        `–û—Ç–≤–µ—Ç: ${entry.answer || '(–µ—â—ë –Ω–µ—Ç)'}`,
        `---`
      ].join('\n');
    });

    const text = lines.join('\n\n');
    const filePath = path.join(__dirname, 'history.txt');
    fs.writeFileSync(filePath, text);
    bot.sendDocument(chatId, filePath);
  } catch {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.');
  }
  return;
}

  if (data === 'ask') {
    bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [
          [{ text: '–°–µ–º—å—è L.E.G.E.N.D.A', callback_data: 'topic1' }],
          [{ text: '–ö–∞–Ω–∞–ª', callback_data: 'topic2' }],
          [{ text: '–õ–∏—á–Ω–æ–µ', callback_data: 'topic3' }],
          [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    });
  }

  if (data === 'projects') {
    bot.editMessageText('–ü—Ä–æ–µ–∫—Ç—ã Diogonal777:\n\n–°–∞–π—Ç: https://diogonal777.github.io/Diogonal-game\n–ú–æ–±–∏–ª—å–Ω–∞—è –∏–≥—Ä–∞: (–ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—é)\n–°–∞–π—Ç: https://taplink.cc/diogonal\n–°–µ–º—å—è –≤ Grand mobile: https://taplink.cc/l.e.g.e.n.d.a', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]]
      }
    });
  }

  if (data === 'about me') {
    bot.editMessageText('–Ø Diogonal777 (–í–∞–¥–∏–º).\n–ö–æ–≥–¥–∞ —Å–∫—É—á–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É—é.', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]]
      }
    });
  }

  if (data === 'about bot') {
    bot.editMessageText('–°–æ–∑–¥–∞—é —è –±–æ—Ç–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–º–æ—â—å—é chat GPT. –í –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥ –ø–∏—à—É —Å–∞–º.\n\n–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã. –Ø –±—É–¥—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å –µ–≥–æ. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @Diogonal777', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]]
      }
    });
  }

  const topicTitles = {
    topic1: '–°–µ–º—å—è L.E.G.E.N.D.A',
    topic2: '–ö–∞–Ω–∞–ª',
    topic3: '–õ–∏—á–Ω–æ–µ'
  };

  if (['topic1', 'topic2', 'topic3'].includes(data)) {
    const topicTitle = topicTitles[data];
    userStates[chatId] = { step: 'waiting_question', topic: topicTitle };
    bot.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É: ${topicTitle}. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:`, {
      chat_id: chatId,
      message_id: messageId
    });
  }

  if (data === 'back_to_main') {
    userStates[chatId] = null;
    bot.editMessageText('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Diogonal777. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask' }],
          [{ text: '–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã', callback_data: 'projects' }],
          [{ text: '–û–±–æ –º–Ω–µ', callback_data: 'about me' }],
          [{ text: '–û –±–æ—Ç–µ', callback_data: 'about bot' }]
        ]
      }
    });
  }

  if (data.startsWith('reply_')) {
  const parts = data.split('_');
  const targetId = parts[1];
  const question = decodeURIComponent(parts.slice(2).join('_'));
  stats.answered++;
  saveStats(stats);
  userStates[ADMIN_ID] = { step: 'awaiting_reply', targetId };

  bot.sendMessage(ADMIN_ID, `–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è ${userQuestions[targetId]?.username || '(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)'} (${targetId}):\n\n–í–æ–ø—Ä–æ—Å: ${question}`);

  const index = pendingQuestions.findIndex(q => q.userId == targetId && q.question === question);
  if (index !== -1) pendingQuestions.splice(index, 1);

  bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
    chat_id: chatId,
    message_id: messageId
  });
 }
  
if (data.startsWith('ignore_')) {
  const parts = data.split('_');
  const targetId = parts[1];
  const question = decodeURIComponent(parts.slice(2).join('_'));
  stats.ignored++;
  saveStats(stats);
  bot.sendMessage(targetId, '–í–∞—à –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
  bot.sendMessage(ADMIN_ID, `–í—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç ${targetId}.`);

  const index = pendingQuestions.findIndex(q => q.userId == targetId && q.question === question);
  if (index !== -1) pendingQuestions.splice(index, 1);

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
  saveToHistory({
    userId: targetId,
    userName: userQuestions[targetId]?.name || '(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)',
    topic: userQuestions[targetId]?.topic || '(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)',
    question,
    answer: '(–≤–æ–ø—Ä–æ—Å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω)',
    timestamp: new Date().toISOString()
  }, true);

  bot.editMessageReplyMarkup({ inline_keyboard: [] }, {
    chat_id: chatId,
    message_id: messageId
  });
 }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const state = userStates[chatId];
  if (getCurrentWeek() !== stats.week) {
  stats = { total: 0, answered: 0, ignored: 0, users: [], week: getCurrentWeek() };
  saveStats(stats);
}

  if (chatId === ADMIN_ID && userStates[ADMIN_ID]?.step === 'awaiting_reply') {
    const targetId = userStates[ADMIN_ID].targetId;
    const question = userQuestions[targetId]?.question || '(–≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω)';
    bot.sendMessage(targetId, `–í–∞—à –≤–æ–ø—Ä–æ—Å:\n${question}\n\n–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n${text}`);
    appendToSheet(
  '111tEpDpi7RzCYbhcpxGFgWbxMQtuwYTRPcC2CXPH5ZU',
  '–õ–∏—Å—Ç1!A2',
[
  new Date().toLocaleString(),
  targetId,
  userQuestions[targetId]?.name || '(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)',
  userQuestions[targetId]?.username || '',
  userQuestions[targetId]?.topic || '',
  question,
  text
]

);

    bot.sendMessage(ADMIN_ID, '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
    saveToHistory({
     userId: targetId,
     userName: userQuestions[targetId]?.name || '(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)',
     topic: userQuestions[targetId]?.topic || '(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)',
     question: question,
     answer: text,
     timestamp: new Date().toISOString()
    }, true);

    userStates[ADMIN_ID] = null;
    return;
  }

  if (state && state.step === 'waiting_question') {
    const userName = `${msg.from.first_name || ''} ${msg.from.last_name || ''}`.trim();
    const username = msg.from.username ? `@${msg.from.username}` : '(—é–∑–µ—Ä–Ω–µ–π–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)';
    const topic = state.topic;
    stats.total++;
     if (!stats.users.includes(userName)) stats.users.push(userName);
     saveStats(stats);
    userQuestions[chatId] = {
      question: text,
      topic,
      username,
      name: userName
    };

    pendingQuestions.push({
     userId: chatId,
     userName: `${userName} (${username})`,
     topic,
     question: text
   });

    bot.sendMessage(ADMIN_ID,
      `–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n\n–û—Ç: ${userName} (${username})\nID: ${chatId}\n–¢–µ–º–∞: ${topic}\n\n–í–æ–ø—Ä–æ—Å:\n${text}`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_${chatId}_${encodeURIComponent(text)}` },
              { text: '‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data: `ignore_${chatId}_${encodeURIComponent(text)}` }
            ]
          ]
        }
      });

    bot.sendMessage(chatId, '–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.', {
      reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]]
      }
    });

    userStates[chatId] = null;
  }
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Express
const app = express();
app.use(bodyParser.json());

app.post('/webhook', (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});
app.get('/admin', (req, res) => {
  let html = `
    <html>
    <head>
      <meta charset="UTF-8">
      <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</title>
      <style>
        body { font-family: sans-serif; padding: 20px; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ccc; padding: 8px; }
        th { background-color: #f4f4f4; }
        tr:hover { background-color: #f0f0f0; }
        .small { font-size: 0.9em; color: gray; }
      </style>
    </head>
    <body>
      <h1>–û—á–µ—Ä–µ–¥—å –≤–æ–ø—Ä–æ—Å–æ–≤</h1>
      <table>
        <tr><th>#</th><th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th><th>–¢–µ–º–∞</th><th>–í–æ–ø—Ä–æ—Å</th></tr>
  `;

  pendingQuestions.forEach((q, i) => {
    html += `<tr>
      <td>${i + 1}</td>
      <td>${q.userName}<br><span class="small">ID: ${q.userId}</span></td>
      <td>${q.topic}</td>
      <td>${q.question}</td>
    </tr>`;
  });

  html += `
      </table>
      <p>–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ${pendingQuestions.length}</p>
    </body>
    </html>
  `;

  res.send(html);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
bot.onText(/\/stats/, (msg) => {
  if (msg.chat.id !== ADMIN_ID) return;

  const userList = Array.from(stats.users).join('\n') || '(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)';
  bot.sendMessage(ADMIN_ID,
  `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n` +
  `–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${stats.total}\n` +
  `–û—Ç–≤–µ—á–µ–Ω–æ: ${stats.answered}\n` +
  `–ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${stats.ignored}\n\n` +
  `–ü–∏—Å–∞–ª–∏:\n${stats.users.join('\n') || '(–Ω–∏–∫—Ç–æ)'}`
  );
});

bot.onText(/\/history/, (msg) => {
  if (msg.chat.id !== ADMIN_ID) return;

  try {
    const data = JSON.parse(fs.readFileSync(historyFile, 'utf8'));

    if (!data.length) {
      return bot.sendMessage(ADMIN_ID, '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.');
    }

    const lines = data.map((entry, i) => {
      return [
        `#${i + 1}`,
        `–î–∞—Ç–∞: ${new Date(entry.timestamp).toLocaleString()}`,
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${entry.userName} (ID: ${entry.userId})`,
        `–¢–µ–º–∞: ${entry.topic}`,
        `–í–æ–ø—Ä–æ—Å: ${entry.question}`,
        `–û—Ç–≤–µ—Ç: ${entry.answer || '(–µ—â—ë –Ω–µ—Ç)'}`,
        `---`
      ].join('\n');
    });

    const text = lines.join('\n\n');
    const filePath = path.join(__dirname, 'history.txt');

    fs.writeFileSync(filePath, text);

    bot.sendDocument(ADMIN_ID, filePath, {}, {
      filename: 'history.txt',
      contentType: 'text/plain'
    });

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:', err);
    bot.sendMessage(ADMIN_ID, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.');
  }
});

bot.onText(/^\/(stats|history|–æ—á–µ—Ä–µ–¥—å|admin)$/, (msg) => {
  if (msg.chat.id !== ADMIN_ID) {
    return bot.sendMessage(msg.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }
});

bot.onText(/\/admin/, (msg) => {
  if (msg.chat.id !== ADMIN_ID) {
    return bot.sendMessage(msg.chat.id, '–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
  }

  bot.sendMessage(ADMIN_ID, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', url: 'https://dioginal-bot-telegram.onrender.com/admin' }],
        [{ text: '–û—á–µ—Ä–µ–¥—å', callback_data: 'admin_queue' }], 
        [{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
        [{ text: '–ò—Å—Ç–æ—Ä–∏—è (—Ñ–∞–π–ª)', callback_data: 'admin_history_file' }],
        [[{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–∞–±–ª–∏—Ü–∞)', url: 'https://docs.google.com/spreadsheets/d/1yJ8FDwfC9txPFSr3DSzhQ4bsIJ5XzQJAp_JvxLdXEOs/edit' },
          { text: '–ò—Å—Ç–æ—Ä–∏—è (—Ç–∞–±–ª–∏—Ü–∞)', url: 'https://docs.google.com/spreadsheets/d/111tEpDpi7RzCYbhcpxGFgWbxMQtuwYTRPcC2CXPH5ZU/edit' }]] 
        ]
    }
  });
});
 
